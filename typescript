Script started on Sun 14 Feb 2021 05:27:43 PM EST
]0;khutliwala_z@cobra:~/CSC245/Prog1[?1034h[khutliwala_z@cobra Prog1]$ cat editor.cpp
#include <iostream>
#include<fstream>
#include "linelist.h"
#include <stdlib.h>
#include <string>
using namespace std;

	void StartUp(int argc, char *argv[],LineList &L); //prototype for StartUp method
	void OpenFile(ifstream &infile, char *argv[], int argc); //prototype for OpenFile method
	void GetCommand(LineList &L, char &command); //prototype for GetCommand method
	void Insert(LineList &L);// prototype for Insert method
	void FinishUp(char *argv[], LineList &L); //prototype for FinishUp method




	int main(int argc, char *argv[]) //main method
	{
        	LineList L; //LineList object
	        char command; //character variable that stores command

        	StartUp (argc, argv, L); //call of StartUp method
		
		//do while for different commands 
       		do 
        	{
                	GetCommand (L, command); //call of GetCommand method 

                	switch((command)) //switch statement for each command
                	{
           
				case 'L':{ //case L
	                 	cin.ignore(1000000, '\n'); //captures just L 
			 	L.printList();  break;} //call printList method

                        	case 'I' : //case I
				{	
                         	Insert(L);     break;} //call Insert method
                        	
				case 'D' : //case D
			 	{	
                         	cin.ignore(1000000, '\n'); //captures just D
			 	L.deleteLine(); break;} //call deleteLine method

                        	case 'N' : //case N
				{	
			 	cin.ignore(1000000, '\n'); //captures just N
                         	L.moveNextLine(); break;} //call moveNextLine method

                        	case 'P' : //case P
				{		
                	 	cin.ignore(1000000, '\n'); //captures just P	 
		       	 	L.movePrevLine(); break;} //call movePrevLine method

				default: //default case
				{
		         	cin.ignore(1000000,'\n'); //ignores anything that is not one of these commands
				}
                	}

        		} while ((command) != 'E'); //stop when it equals E

        	FinishUp (argv, L); //call FinishUp method
        	return 0;
	}	

	//Post:Will open the file that is sent to the command line and 
	//LineList object will be intialized with whatever is already in the file 
	void StartUp(int argc, char *argv[], LineList &L){

		ifstream infile; //infile

		OpenFile(infile, argv, argc); //call OpenFile method
		string s; //string s

		 while (getline(infile, s)){ //getting each line
                       L.insertLine(s); //inserting each line in the fileas a seperate line
		
		}
		L.printList(); //print the list
		L.goToBottom(); //be at the bottom of the list
	}

	//Post: Will open the file that is sent to the command line	
	void OpenFile(ifstream &infile,char *argv[], int argc){

		if(argc == 1){ //if argc equals 1
		cout << "Error: You have not entered a filename!" << endl; //they did not enter a filename and display error message
		exit(1); //exit
		}

		string namef =argv[1]; //string for filename

                infile.open(namef.c_str(),ifstream::in); //open up file
	
	}

	//Post: Will take in the command on the command line
	void GetCommand(LineList &L, char &command){
		cout << L.getCurrLineNum() << "> "; //print
		cin >> command;	//take in command
	}

	//Post: Will insert a Line 
	void Insert(LineList &L){
		cout << (L.getCurrLineNum()+1) << "> "; //print
		cin.ignore(1000000,'\n'); //allows for new input
		string newL = ""; //string that stores the line you want to inpit
		getline(cin, newL); //put whole line's input in newL string
		
		L.insertLine(newL); //calling of insertLine method
	}

	//Post: Will close up file with the changes made
	void FinishUp(char *argv[], LineList &L){
		ofstream outfile; //out file

		string namef =argv[1]; //string for filename
		
		outfile.open(namef.c_str()); //open outfile
		
		L.goToTop(); //go to the top 

		//for loop that get every line and adds it to the file
		for(int j = 0; j < L.getLength(); j++){
		
			outfile << L.getCurrLine() << endl; //add currentLine to outfile
			L.moveNextLine(); //go to the next line
		}

		outfile.close(); //close the outfile
	}
]0;khutliwala_z@cobra:~/CSC245/Prog1[khutliwala_z@cobra Prog1]$ cat linelist.cpp

#include <iostream>
#include "linelist.h"

LineList::LineList() //LineList constructor
{
	LineNode *line = new LineNode; //lineNode 1
	LineNode *line2 = new LineNode; //lineNode 2

	line -> info = topMessage; //top buffer
	currLine = line; //currLine set to lineNode
	currLineNum = 0; //int value that keeps track of current line number
	length = 0; //int value that keeps track of length of LineList
	line2 -> info = bottomMessage;// bottom buffer
	currLine -> back = NULL; //currLine back is set to NULL
	currLine -> next = line2; //currLine next is set to lineNode2
	line2 -> back = line; //lineNode2 back is set to line
	line2 -> next = NULL; //lineNode2 next is set to NULL
}

void LineList::goToTop() 
{
	// Post : Advances currLine to line 1

	//while loop that keeps going to the previous LineNode until it hits NULL
	while(currLine -> back !=  NULL){
		currLine = currLine -> back; //go back to the previous LineNode
		currLineNum--; //decrement currLineNum by 1
	}
	currLine = currLine -> next; //go to next node because we never want to be at the top buffer
	currLineNum = 1; //set currLineNum to 1 which is the first line
}

void LineList::goToBottom() 
{
	// Post : Advances currLine to last line

	//while loop that keeps going to the next LineNode until it hits NULL
	while(currLine -> next != NULL){
		currLine = currLine -> next; //go to the next LineNode
		currLineNum++; //increment currLineNum by 1
	}
	currLine = currLine -> back; //go to the previous node because we never want to be at the bottom buffer
	currLineNum--; //decrement currLineNum by 1 because you are going back one node
}

void LineList::insertLine(string newLine)
{
	// post : newLine has been inserted after the current line
	 if ( currLine -> info == bottomMessage ) //if currLine is equal to the bottom buffer, go back to the previous LineNode
           movePrevLine(); //calls movePrevLine method

	LineNode *newL = new LineNode; //create a new LineNode for the line you are about to insert
	newL -> info = newLine; //new LineNode info is equal to the string that we are passing into this method
	newL -> back = currLine; //link new LineNode's back to currLine
	newL -> next = currLine -> next; //link new LineNode's next to currLine's next
	
	currLine -> next -> back = newL; //link currLine Node's next's back to the new LineNode
	currLine -> next = newL; //link currLine Node's next to new LineNode
	currLine = currLine -> next; //set currLine Node to old currLine's next

	currLineNum++; //increment currLineNum
	length++; //increase the length by 1
}

void LineList::deleteLine()
{
	// post : deletes the current line leaving currentLine
	//	  pointing to line following

	if(length !=0){ //if the length is not zero then you can delete items

	if( currLine -> info == bottomMessage ){
		movePrevLine();}  //if the currentLine is at the bottom buffer go back to the previous line
	if( currLine -> info == topMessage ){ 
		moveNextLine();} //if the currentLine is at the top buffer go to the next line

	LineNode *dLine = currLine; //create a new LineList node for the line about to be deleted

	currLine = currLine -> next; //the new currentLine is the old currLine's next


	currLine -> back = dLine -> back; //link currLine's back to the line about to be deleted's back
	currLine -> back -> next  = dLine -> next; //link currLine's back's next to the line about to be deleted's next
	currLine = dLine -> back;	//set currLine back to it's original position


	dLine -> next = NULL; //set the dLine node's next to NULL
	dLine -> back = NULL; //set the dLine node's back to NULL
	
	delete dLine; //free up space in dLine Node
	dLine = NULL; //set dLine Node to NULL
	
	
	currLineNum--; //decrement currLineNum
	length--; //decrement length}
}}

void LineList::printList() 
{
	 //post: lists all the lines
	 int lineNum = 1; //set lineNum to 1

        LineNode *mark = currLine; //create a LineNode to keep track of where you are
        int markNum = currLineNum; //integer to keep track of where you are

        goToTop(); //calling goToTop to start the method 

        LineNode *line = currLine; //create a new LineNode and set it equal to the currLine

        while (line -> info != bottomMessage) //while it does not equal the bottom buffer continue to print
        {
                cout << lineNum << "> " << line -> info << endl; //print
                line = line -> next; //set new line node to the old line node's next
                lineNum++; //increment lineNum
        }

        currLine = mark; //change currLine to mark
        currLineNum = markNum; //change currLineNum to markNum


}

string LineList::getCurrLine() const
{
	//Post:  returns a string representing the line currently being pointed to by the
	//external pointer
	return currLine -> info; //get info about currLine

}

void LineList::moveNextLine()
{
	// Post : Advances currLine (unless already at last line)
	if(currLine -> next != NULL){ //move to the next node if there is one
		currLine = currLine -> next; //set currLine to currLine's next
		currLineNum++; //increment currLineNum
	}

	if(currLine -> info == bottomMessage){
		currLineNum = length+1;
	}

}

void LineList::movePrevLine()
{
	// Post: go to the line above it
	if(currLine -> back != NULL){ //move back if currLine's back does not equal NULL
		currLine = currLine -> back; //set currLine to currLine's back
		 currLineNum--; //decrement currLineNum
	}
	
	if(currLine -> info == topMessage){ //if it equals the top buffer
		currLineNum = 0;	//set currLineNum to 0
	
	}

}

int LineList::getCurrLineNum() const
{
	//Post: returns an integer that represents the CurrLineNum
	return currLineNum; //returns currLineNum

}

int LineList::getLength() const
{
	//Post: returns an integer that represents the length of the LineList
	return length; //returns length of LineList
}

]0;khutliwala_z@cobra:~/CSC245/Prog1[khutliwala_z@cobra Prog1]$ c++ editor.cpp linelist.o
]0;khutliwala_z@cobra:~/CSC245/Prog1[khutliwala_z@cobra Prog1]$ ./a.out testfile
1> This is my second line.
2> This is my third line.
3> Fourth Line
3> D
2> L
1> This is my second line.
2> This is my third line.
2> P
1> P
0> I
1> This is my first line.
1> L
1> This is my first line.
2> This is my second line.
3> This is my third line.
1> L P
0> P
0> P
0> P
0> N
1> N
2> N
3> N
4> N
4> L
1> This is my first line.
2> This is my second line.
3> This is my third line.
4> fakdlfjasdlf
4> L
1> This is my first line.
2> This is my second line.
3> This is my third line.
4> E
]0;khutliwala_z@cobra:~/CSC245/Prog1[khutliwala_z@cobra Prog1]$ vim testfile
[?1049h[?1h=[2;1H▽[6n[2;1H  [1;1H]11;?[1;47r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[47;1H"testfile" 3L, 70C[>c[1;1HThis is my first line.
This is my second line.
This is my third line.
[1m[34m~                                                                                                                                             [5;1H~                                                                                                                                             [6;1H~                                                                                                                                             [7;1H~                                                                                                                                             [8;1H~                                                                                                                                             [9;1H~                                                                                                                                             [10;1H~                                                                                                                                             [11;1H~                                                                                                                                             [12;1H~                                                                                                                                             [13;1H~                                                                                                                                             [14;1H~                                                                                                                                             [15;1H~                                                                                                                                             [16;1H~                                                                                                                                             [17;1H~                                                                                                                                             [18;1H~                                                                                                                                             [19;1H~                                                                                                                                             [20;1H~                                                                                                                                             [21;1H~                                                                                                                                             [22;1H~                                                                                                                                             [23;1H~                                                                                                                                             [24;1H~                                                                                                                                             [25;1H~                                                                                                                                             [26;1H~                                                                                                                                             [27;1H~                                                                                                                                             [28;1H~                                                                                                                                             [29;1H~                                                                                                                                             [30;1H~                                                                                                                                             [31;1H~                                                                                                                                             [32;1H~                                                                                                                                             [33;1H~                                                                                                                                             [34;1H~                                                                                                                                             [35;1H~                                                                                                                                             [36;1H~                                                                                                                                             [37;1H~                                                                                                                                             [38;1H~                                                                                                                                             [39;1H~                                                                                                                                             [40;1H~                                                                                                                                             [41;1H~                                                                                                                                             [42;1H~                                                                                                                                             [43;1H~                                                                                                                                             [44;1H~                                                                                                                                             [45;1H~                                                                                                                                             [46;1H~                                                                                                                                             [m[47;125H1,1[11CAll[1;1H[?12l[?25h[?25l[47;1H[K[47;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"testfile" 3L, 70C written
[?1l>[?12l[?25h[?1049l]0;khutliwala_z@cobra:~/CSC245/Prog1[khutliwala_z@cobra Prog1]$ exit
exit

Script done on Sun 14 Feb 2021 05:29:08 PM EST
